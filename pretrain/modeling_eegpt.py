"""EEGPT模型实现

这个文件包含EEGPT模型的实现，遵循transformers库的风格。
"""

import math
import torch
import torch.nn as nn
import torch.nn.functional as F
from typing import Optional, Tuple, Union, Dict, Any, List

from dataclasses import dataclass
import copy

# 导入配置类
from configuration_eegpt import EEGPTConfig

# ========== 常量定义 ==========

CHANNEL_DICT = {k.upper():v for v,k in enumerate(
                     [      'FP1', 'FPZ', 'FP2', 
                        "AF7", 'AF3', 'AF4', "AF8", 
            'F7', 'F5', 'F3', 'F1', 'FZ', 'F2', 'F4', 'F6', 'F8', 
        'FT7', 'FC5', 'FC3', 'FC1', 'FCZ', 'FC2', 'FC4', 'FC6', 'FT8', 
            'T7', 'C5', 'C3', 'C1', 'CZ', 'C2', 'C4', 'C6', 'T8', 
        'TP7', 'CP5', 'CP3', 'CP1', 'CPZ', 'CP2', 'CP4', 'CP6', 'TP8',
             'P7', 'P5', 'P3', 'P1', 'PZ', 'P2', 'P4', 'P6', 'P8', 
                      'PO7', "PO5", 'PO3', 'POZ', 'PO4', "PO6", 'PO8', 
                               'O1', 'OZ', 'O2', ])}

# ========== 辅助函数 ==========

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def apply_mask(mask, x):
    """
    :param x: tensor of shape [B (batch-size), N (num-patches), C, D (feature-dim)]
    :param mask: tensor [mN, mC] containing indices of patches in [N, C] to keep 
    """    
    B, N, C, D = x.shape
    if len(mask.shape)==2:
        mN, mC = mask.shape
        
        mask_keep = mask.reshape((1,mN*mC,1)).repeat((B, 1, D))
        masked_x = torch.gather(x.reshape((B, N*C, D)), dim=-2, index=mask_keep)
        masked_x = masked_x.contiguous().view((B,mN,mC,D))
    else:
        mN = mask.shape[0]
        
        mask_keep = mask.reshape((1,mN,1)).repeat((B, 1, D))
        masked_x = torch.gather(x.reshape((B, N*C, D)), dim=-2, index=mask_keep)
    return masked_x


def apply_mask_t(mask_t, x):
    """
    :param x: tensor of shape [B (batch-size), N (num-patches), C, D (feature-dim)]
    :param mask: tensor [mN, mC] containing indices of patches in [N, C] to keep 
    """    
    B, N, D = x.shape
    mN = mask_t.shape[0]
    
    mask_keep = mask_t.reshape((1,mN,1)).repeat((B, 1, D))
    masked_x = torch.gather(x, dim=1, index=mask_keep)
    return masked_x


# RotaryEmbedding实现
def rotate_half(x):
    x = x.reshape((*x.shape[:-1],x.shape[-1]//2, 2))
    x1, x2 = x.unbind(dim = -1)
    x = torch.stack((-x2, x1), dim = -1)
    return x.flatten(-2)


def apply_rotary_emb(freqs, t, start_index=0, scale=1.):
    """应用旋转位置嵌入到输入张量"""
    freqs = freqs.to(t.device)
    rot_dim = freqs.shape[-1]
    end_index = start_index + rot_dim
    assert rot_dim <= t.shape[-1], f'特征维度 {t.shape[-1]} 不足以在所有位置 {rot_dim} 上旋转'
    t_left, t_middle, t_right = t[..., :start_index], t[..., start_index:end_index], t[..., end_index:]
    t_rotated_middle = (t_middle * freqs.cos() * scale) + (rotate_half(t_middle) * freqs.sin() * scale)
    return torch.cat((t_left, t_rotated_middle, t_right), dim=-1)


class RotaryEmbedding(nn.Module):
    def __init__(self, dim, theta=10000, learned_freq=False, interpolate_factor=1.0):
        super().__init__()
        assert interpolate_factor >= 1.0, "Interpolate factor must be >= 1.0"
        self.freqs = nn.Parameter(
            1. / (theta ** (torch.arange(0, dim, 2)[:(dim // 2)].float() / dim)),
            requires_grad = learned_freq)
        self.interpolate_factor = interpolate_factor
        self.cache = {}

    def prepare_freqs(self, num_patches, device='cuda', dtype=torch.float32, offset=0):
        C, N = num_patches
        cache_key = f'freqs:{num_patches}'
        if cache_key in self.cache:
            return self.cache[cache_key]
        seq_pos = torch.arange(N, device=device, dtype=dtype).repeat_interleave(repeats=C)
        seq_pos = (seq_pos + offset) / self.interpolate_factor
        freqs_scaled = torch.outer(seq_pos.type(self.freqs.dtype), self.freqs).repeat_interleave(repeats=2, dim=-1)
        self.cache[cache_key] = freqs_scaled
        return freqs_scaled


# ========== 模型组件 ==========

class DropPath(nn.Module):
    """随机深度的实现"""
    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob
        
    def drop_path(self, x, drop_prob: float = 0., training: bool = False):
        if drop_prob == 0. or not training:
            return x
        keep_prob = 1 - drop_prob
        shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
        random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
        random_tensor.floor_()  # binarize
        output = x.div(keep_prob) * random_tensor
        return output
    
    def forward(self, x):
        return self.drop_path(x, self.drop_prob, self.training)


class MLP(nn.Module):
    """多层感知机实现"""
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=nn.GELU, drop=0.):
        super().__init__()
        out_features = out_features or in_features 
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer()
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    """注意力机制实现"""
    def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., proj_drop=0., is_causal=False, use_rope=False, return_attention=False):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = dim // num_heads
        self.use_rope = use_rope
        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = attn_drop
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)
        self.is_causal = is_causal
        self.return_attention = return_attention

    def forward(self, x, freqs=None):
        B, T, C = x.shape
        qkv = self.qkv(x).reshape(B, T, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4) # 3,B,nh,t,d
        q, k, v = qkv[0], qkv[1], qkv[2] # B,nh,t,d
        
        if self.use_rope:# RoPE
            q = apply_rotary_emb(freqs, q)
            k = apply_rotary_emb(freqs, k)
        if self.return_attention:
            if self.is_causal:
                attn_mask = torch.ones(q.size(-2), q.size(-2), dtype=torch.bool).tril(diagonal=0)
                attn_maak = torch.zeros(q.size(-2), q.size(-2))
                attn_mask = attn_maak.masked_fill(torch.logical_not(attn_mask), -float('inf'))
                attn_weight = torch.softmax((q @ k.transpose(-2, -1) / math.sqrt(q.size(-1))) + attn_mask, dim=-1)
            else:
                attn_weight = torch.softmax((q @ k.transpose(-2, -1) / math.sqrt(q.size(-1))), dim=-1)
            return attn_weight
        # efficient attention using Flash Attention CUDA kernels
        y = torch.nn.functional.scaled_dot_product_attention(
            q, k, v, attn_mask=None, dropout_p=self.attn_drop if self.training else 0, is_causal=self.is_causal)
        x = y.transpose(1, 2).contiguous().view(B, T, C) #(B, nh, T, hs) -> (B, T, hs*nh)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class Block(nn.Module):
    """Transformer块实现"""
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm, is_causal=False, use_rope=False, return_attention=False):
        super().__init__()
        self.return_attention = return_attention
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, attn_drop=attn_drop, proj_drop=drop, is_causal=is_causal, use_rope=use_rope, return_attention=return_attention)
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = MLP(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, freqs=None):
        y = self.attn(self.norm1(x), freqs)
        if self.return_attention: 
            return y
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class PatchEmbed(nn.Module):
    """图像到Patch嵌入"""
    def __init__(self, img_size=(64, 1000), patch_size=16, patch_stride=None, embed_dim=768):
        super().__init__()
        self.img_size = img_size
        self.patch_size = patch_size
        self.patch_stride = patch_stride
        if patch_stride is None:
            self.num_patches = ((img_size[0]), (img_size[1] // patch_size))
        else:
            self.num_patches = ((img_size[0]), ((img_size[1] - patch_size) // patch_stride + 1))

        self.proj = nn.Conv2d(1, embed_dim, kernel_size=(1,patch_size), 
                              stride=(1, patch_size if patch_stride is None else patch_stride))
        
    def forward(self, x):
        # x: B,C,T
        x = x.unsqueeze(1)# B, 1, C, T
        x = self.proj(x).transpose(1,3) # B, T, C, D
        return x


class PatchNormEmbed(nn.Module):
    """带有归一化的Patch嵌入"""
    def __init__(self, img_size=(64, 1000), patch_size=16, patch_stride=None, embed_dim=768):
        super().__init__()
        
        assert img_size[1] % patch_size==0
        
        self.img_size = img_size
        self.patch_size = patch_size
        self.patch_stride = patch_stride
        
        if patch_stride is None:
            self.num_patches = ((img_size[0]), (img_size[1] // patch_size))
        else:
            self.num_patches = ((img_size[0]), ((img_size[1] - patch_size) // patch_stride + 1))

        self.unfold = torch.nn.Unfold(kernel_size=(1, patch_size), stride = (1, patch_stride if patch_stride is not None else patch_size))
        self.proj = nn.Linear(patch_size, embed_dim)#+2

    def forward(self, x):
        # x: B,C,T
        B,C,T = x.shape
        x = x.unsqueeze(1) # B 1 C T
        x = self.unfold(x)
        x = x.transpose(-1,-2)
        x = x.view(B, C, -1, self.patch_size).contiguous()
        x = x.transpose(1,2)
        x = torch.layer_norm(x, (self.patch_size,))
        x = self.proj(x) # B, T, C, D
        return x


# ========== 模型类 ==========

class EEGPTPreTrainedModel(nn.Module):
    """EEGPT预训练模型的基类"""
    config_class = EEGPTConfig
    base_model_prefix = "eegpt"
    
    def __init__(self, config):
        super().__init__()
        self.config = config
        self.init_std = config.init_std
        
    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=self.init_std)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            trunc_normal_(m.weight, std=self.init_std)
            if m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.Embedding):
            torch.nn.init.normal_(m.weight, mean=0.0, std=0.02)
            
    def fix_init_weight(self):
        def rescale(param, layer_id):
            param.div_(math.sqrt(2.0 * layer_id))

        for layer_id, layer in enumerate(self.modules()):
            if isinstance(layer, Block):
                rescale(layer.attn.proj.weight.data, layer_id + 1)
                rescale(layer.mlp.fc2.weight.data, layer_id + 1)


class EEGPTModel(EEGPTPreTrainedModel):
    """EEGPT基础模型实现"""
    def __init__(self, config):
        super().__init__(config)
        
        self.num_features = self.embed_dim = config.embed_dim
        self.embed_num = config.embed_num
        self.num_heads = config.num_heads
        
        # Patch嵌入
        patch_module = PatchEmbed if config.use_rope else PatchNormEmbed
        self.patch_embed = patch_module(
            img_size=config.img_size,
            patch_size=config.patch_size,
            patch_stride=config.patch_stride,
            embed_dim=config.embed_dim)
        self.num_patches = self.patch_embed.num_patches
        
        # 通道嵌入
        self.chan_embed = nn.Embedding(len(CHANNEL_DICT), config.embed_dim)
        
        # Transformer块
        dpr = [x.item() for x in torch.linspace(0, config.drop_path_rate, config.depth)]
        self.blocks = nn.ModuleList([
            Block(
                dim=config.embed_dim, 
                num_heads=config.num_heads, 
                mlp_ratio=config.mlp_ratio, 
                qkv_bias=config.qkv_bias,
                drop=config.drop_rate, 
                attn_drop=config.attn_drop_rate, 
                drop_path=dpr[i], 
                norm_layer=nn.LayerNorm, 
                is_causal=False, 
                use_rope=False, 
                return_attention=(i+1)==-1)
            for i in range(config.depth)])
            
        self.norm = nn.LayerNorm(config.embed_dim)
        
        # 汇总token
        self.summary_token = nn.Parameter(torch.zeros(1, config.embed_num, config.embed_dim))
        
        # 初始化
        trunc_normal_(self.summary_token, std=self.init_std)
        self.apply(self._init_weights)
        self.fix_init_weight()
        
    def prepare_chan_ids(self, channels):
        """准备通道ID"""
        chan_ids = []
        for ch in channels:
            ch = ch.upper().strip('.')
            assert ch in CHANNEL_DICT
            chan_ids.append(CHANNEL_DICT[ch])
        return torch.tensor(chan_ids).unsqueeze_(0).long()
        
    def forward(self, x, chan_ids=None, mask_x=None, mask_t=None):
        """
        Args:
            x: 输入EEG数据, 形状为[B, C, T]
            chan_ids: 通道ID, 如果为None, 使用默认的通道ID
            mask_x: 掩码, 形状为[mN, mC]
            mask_t: 掩码, 形状为[mN]
            
        Returns:
            output: 模型输出, 形状为[B, N, embed_num, embed_dim]
        """
        # 嵌入处理
        x = self.patch_embed(x) # [B, N, C, D]
        B, N, C, D = x.shape
        
        assert N==self.num_patches[1] and C==self.num_patches[0], f"{N}=={self.num_patches[1]} and {C}=={self.num_patches[0]}"
        
        if chan_ids is None:
            chan_ids = torch.arange(0,C)     
        chan_ids = chan_ids.to(x.device)
        
        # 添加通道位置嵌入
        x = x + self.chan_embed(chan_ids.long()).unsqueeze(0) # (1,C) -> (1,1,C,D)
        
        # 应用掩码
        if mask_x is not None:
            mask_x = mask_x.to(x.device)
            x = apply_mask(mask_x, x)# B, mN, mC, D
            B, N, C, D = x.shape
        
        x = x.flatten(0, 1) # BmN, mC, D
        
        # 拼接汇总token
        summary_token = self.summary_token.repeat((x.shape[0], 1, 1))
        x = torch.cat([x,summary_token], dim=1)  # BmN, mC+embed_num, D
        
        # 前向传播
        for i, blk in enumerate(self.blocks):
            x = blk(x) # B*N, mC+1, D
            if blk.return_attention==True: 
                return x

        # 取出汇总token
        x = x[:, -summary_token.shape[1]:, :]
        
        if self.norm is not None:
            x = self.norm(x) 
        
        # 重塑回原始形状
        x = x.flatten(-2)
        x = x.reshape((B, N, -1))
            
        if mask_t is not None:
            mask_t = mask_t.to(x.device)
            x = apply_mask_t(mask_t, x)# B, mN, D        
        
        x = x.reshape((B, N, self.embed_num, -1))
        
        return x


class EEGPTPredictor(EEGPTPreTrainedModel):
    """EEGPT预测器实现"""
    def __init__(self, config, num_patches):
        super().__init__(config)
        self.use_part_pred = config.use_part_pred if hasattr(config, 'use_part_pred') else True
        self.use_pos_embed = False
        self.use_inp_embed = True
        self.num_patches = num_patches
        self.embed_num = config.embed_num
        
        if self.use_inp_embed:
            self.predictor_embed = nn.Linear(config.embed_dim, config.predictor_embed_dim, bias=True)
        
        if self.use_pos_embed:
            self.pos_embed = nn.Parameter(torch.zeros(1, 1, config.embed_num, config.predictor_embed_dim))
            trunc_normal_(self.pos_embed, std=self.init_std)
        
        self.mask_token = nn.Parameter(torch.zeros(1, 1, config.embed_num, config.predictor_embed_dim))
        
        # Transformer块
        dpr = [x.item() for x in torch.linspace(0, config.drop_path_rate, config.predictor_depth)]
        
        # RoPE嵌入
        self.time_embed_dim = (config.predictor_embed_dim // config.num_heads) // 2
        self.time_embed = RotaryEmbedding(
            dim=self.time_embed_dim, 
            interpolate_factor=config.interpolate_factor)
        
        # Transformer块
        self.predictor_blocks = nn.ModuleList([
            Block(
                dim=config.predictor_embed_dim, 
                num_heads=config.num_heads, 
                mlp_ratio=config.mlp_ratio, 
                qkv_bias=config.qkv_bias,
                drop=config.drop_rate, 
                attn_drop=config.attn_drop_rate, 
                drop_path=dpr[i], 
                norm_layer=nn.LayerNorm, 
                is_causal=False, 
                use_rope=True, 
                return_attention=(i+1)==-1)
            for i in range(config.predictor_depth)])
            
        self.predictor_norm = nn.LayerNorm(config.predictor_embed_dim)
        self.predictor_proj = nn.Linear(config.predictor_embed_dim, config.embed_dim, bias=True)
        
        # 初始化
        trunc_normal_(self.mask_token, std=self.init_std)
        self.apply(self._init_weights)
        self.fix_init_weight()
        
    def forward(self, x, mask_x=None, mask_t=None):
        """
        Args:
            x: 输入特征, 形状为[B, mN, eN, D]
            mask_x: 掩码, 形状为[mN, mC]
            mask_t: 掩码, 形状为[mN]
            
        Returns:
            output: 模型输出
        """
        # 保存输入以用于部分预测
        if self.use_part_pred:
            inp_x = x
            
        # 线性投影
        if self.use_inp_embed:
            x = self.predictor_embed(x)

        C, N = self.num_patches
        B, mN, eN, D = x.shape
        
        # 处理掩码
        freqs = self.time_embed.prepare_freqs((eN, N), x.device, x.dtype)
        
        if mask_x is not None:
            mask_x = mask_x
            mask_x = torch.floor(mask_x[:,0] / C).long()
            
            if mask_t is None:
                mask_t = torch.tensor(list(set(list(range(0,N))) - set(mask_x.tolist()))).long()
                
            # 创建和拼接掩码token
            N_y = mask_t.shape[0]
            y = self.mask_token.repeat((B, N_y, 1, 1))
            x = torch.cat([x,y], dim=1)
            
            # 重新排列张量索引
            mask_id = torch.concat([mask_x.to(x.device), mask_t.to(x.device)], dim=0)            
            x = torch.index_select(x, dim=1, index=torch.argsort(mask_id))    
            
        # 添加位置嵌入
        if self.use_pos_embed:
            x = x + self.pos_embed.repeat((B, x.shape[1], 1, 1)).to(x.device)
            
        # 展平维度
        B, N, eN, D = x.shape
        x = x.flatten(1,2)
        
        # 通过Transformer块
        for blk in self.predictor_blocks:
            x = blk(x, freqs)
            if blk.return_attention==True: 
                return x
        
        # 重塑回原始形状
        x = x.reshape((B, N, eN, D))
        
        # 归一化和投影
        x = self.predictor_norm(x) 
        x = self.predictor_proj(x)
        
        # 处理部分预测
        if self.use_part_pred and mask_x is not None:
            cmb_x = torch.index_select(x, dim=1, index=mask_t.to(x.device)) 
            cmb_x = torch.concat([inp_x, cmb_x], dim=1)
            cmb_x = torch.index_select(cmb_x, dim=1, index=torch.argsort(mask_id)) 
            return x, cmb_x
            
        return x


class EEGPTReconstructor(EEGPTPreTrainedModel):
    """EEGPT重建器实现"""
    def __init__(self, config, num_patches):
        super().__init__(config)
        self.use_inp_embed = True
        self.use_pos_embed = False
        self.num_patches = num_patches
        
        if self.use_inp_embed:
            self.reconstructor_embed = nn.Linear(config.embed_dim, config.reconstructor_embed_dim, bias=True)
        
        if self.use_pos_embed:
            self.pos_embed = nn.Parameter(torch.zeros(1, 1, config.embed_num, config.reconstructor_embed_dim))
            trunc_normal_(self.pos_embed, std=self.init_std)
        
        self.mask_token = nn.Parameter(torch.zeros(1, 1, config.reconstructor_embed_dim))
        
        # Transformer块
        dpr = [x.item() for x in torch.linspace(0, config.drop_path_rate, config.reconstructor_depth)]
        
        # RoPE嵌入
        self.time_embed_dim = (config.reconstructor_embed_dim // config.num_heads) // 2
        self.time_embed = RotaryEmbedding(
            dim=self.time_embed_dim, 
            interpolate_factor=config.interpolate_factor)
            
        # 通道嵌入
        self.chan_embed = nn.Embedding(len(CHANNEL_DICT), config.reconstructor_embed_dim)
        
        # Transformer块
        self.reconstructor_blocks = nn.ModuleList([
            Block(
                dim=config.reconstructor_embed_dim, 
                num_heads=config.num_heads, 
                mlp_ratio=config.mlp_ratio, 
                qkv_bias=config.qkv_bias,
                drop=config.drop_rate, 
                attn_drop=config.attn_drop_rate, 
                drop_path=dpr[i], 
                norm_layer=nn.LayerNorm, 
                is_causal=False, 
                use_rope=True, 
                return_attention=(i+1)==-1)
            for i in range(config.reconstructor_depth)])
            
        self.reconstructor_norm = nn.LayerNorm(config.reconstructor_embed_dim)
        self.reconstructor_proj = nn.Linear(config.reconstructor_embed_dim, config.patch_size, bias=True)
        
        # 初始化
        trunc_normal_(self.mask_token, std=self.init_std)
        self.apply(self._init_weights)
        self.fix_init_weight()
        
    def forward(self, x, chan_ids=None, mask_x=None, mask_y=None):
        """
        Args:
            x: 输入特征, 形状为[B, mN, eN, D]
            chan_ids: 通道ID
            mask_x: 掩码, 形状为[mN, mC]
            mask_y: 掩码, 形状为[mN, mC]
            
        Returns:
            output: 模型输出
        """
        # 准备通道ID
        chan_ids = chan_ids.to(x).long()
        
        # 线性投影
        if self.use_inp_embed:
            x = self.reconstructor_embed(x)

        C, N = self.num_patches
        B, mN, eN, D = x.shape
        
        # 添加通道嵌入
        chan_embed = self.chan_embed(chan_ids).unsqueeze(0)
        
        # 处理掩码x
        if mask_x is not None:
            mask_x = mask_x.to(x.device)
            mask_x = torch.floor(mask_x[:,0] / C).long().to(x.device)
            
            freqs_x = self.time_embed.prepare_freqs((1, N), x.device, x.dtype)
            freqs_x = freqs_x.contiguous().view((1,N,self.time_embed_dim))
            freqs_x = apply_mask_t(mask_x, freqs_x)
            freqs_x = freqs_x.contiguous().view((mask_x.shape[0], 1, self.time_embed_dim))
            freqs_x = freqs_x.repeat((1, eN, 1)).flatten(0,1)
            
        else:
            freqs_x = self.time_embed.prepare_freqs((eN, N), x.device, x.dtype)
            
        # 处理掩码y
        if mask_y is not None:
            mask_y = mask_y.to(x.device)
            
            # 创建查询掩码token
            N_y = mask_y.shape[0]
            chan_embed = chan_embed.repeat((1,N,1,1))
            chan_embed = apply_mask(mask_y, chan_embed)
            
            freqs = self.time_embed.prepare_freqs((C, N), x.device, x.dtype)
            freqs_y = freqs.contiguous().view((1, N, C, self.time_embed_dim))
            freqs_y = apply_mask(mask_y, freqs_y)
            freqs_y = freqs_y.contiguous().view((N_y, self.time_embed_dim))
            
            y = self.mask_token.repeat((B, N_y, 1)) + chan_embed
            
            # 添加位置嵌入
            if self.use_pos_embed:
                x = x + self.pos_embed.repeat((B, x.shape[1], 1, 1)).to(x.device)
                
            # 拼接和展平
            x = x.flatten(1,2)
            x = torch.cat([x,y], dim=1)
            freqs_x = torch.cat([freqs_x, freqs_y], dim=0).to(x)
            
            # 通过Transformer块
            for blk in self.reconstructor_blocks:
                x = blk(x, freqs_x)
                if blk.return_attention==True: 
                    return x
            
            # 取出掩码部分
            x = x[:,-N_y:,:]
            
            # 归一化和投影
            x = self.reconstructor_norm(x)
            x = self.reconstructor_proj(x)
            
            return x


class EEGPTForPreTraining(EEGPTPreTrainedModel):
    """EEGPT预训练模型"""
    def __init__(self, config):
        super().__init__(config)
        
        # 编码器
        self.encoder = EEGPTModel(config)
        
        # 目标编码器
        self.target_encoder = copy.deepcopy(self.encoder)
        for p in self.target_encoder.parameters():
            p.requires_grad = False
            
        # 预测器
        self.predictor = EEGPTPredictor(config, num_patches=self.encoder.num_patches)
        
        # 重建器
        self.reconstructor = EEGPTReconstructor(config, num_patches=self.encoder.num_patches)
        
        # 初始化
        self.apply(self._init_weights)
        
    def forward(
        self,
        x,
        chan_ids=None,
        mask_x=None,
        mask_y=None,
        output_hidden_states=False,
        return_dict=True,
    ):
        """
        Args:
            x: 输入EEG数据, 形状为[B, C, T]
            chan_ids: 通道ID
            mask_x: 掩码x
            mask_y: 掩码y
            output_hidden_states: 是否输出隐藏状态
            return_dict: 是否以字典形式返回
            
        Returns:
            output: 模型输出
        """
        # 编码器前向传播
        encoder_outputs = self.encoder(x, chan_ids=chan_ids, mask_x=mask_x)
        
        # 目标编码器前向传播
        with torch.no_grad():
            target_outputs, y = self.forward_target(x, mask_y, chan_ids=chan_ids)
            
        # 预测器和重建器前向传播
        predictor_outputs, reconstructor_outputs = self.forward_context(
            encoder_outputs, mask_x, mask_y, chan_ids=chan_ids)
            
        # 计算损失
        contrast_loss = F.mse_loss(target_outputs, predictor_outputs)
        reconstruct_loss = F.mse_loss(y, reconstructor_outputs)
        
        # 返回结果
        if not return_dict:
            output = (contrast_loss, reconstruct_loss, predictor_outputs, reconstructor_outputs)
            if output_hidden_states:
                output = output + (encoder_outputs,)
            return output
            
        return {
            "contrast_loss": contrast_loss,
            "reconstruct_loss": reconstruct_loss,
            "predictor_outputs": predictor_outputs,
            "reconstructor_outputs": reconstructor_outputs,
            "hidden_states": encoder_outputs if output_hidden_states else None,
        }
        
    def forward_target(self, x, mask_y, chan_ids=None):
        """目标编码器前向传播"""
        with torch.no_grad():
            h = self.target_encoder(x, chan_ids)
            h = F.layer_norm(h, (h.size(-1),))  # 在特征维度上归一化
            
            C, N = self.encoder.num_patches
            assert x.shape[-1]%N==0 and x.shape[-2]%C == 0
            block_size_c, block_size_n = x.shape[-2]//C, x.shape[-1]//N
            x_reshaped = x.view(x.shape[0], C, block_size_c, N, block_size_n)
            
            # 重排列维度以按通道和空间轴分块
            x_reshaped = x_reshaped.permute(0, 3, 1, 2, 4).contiguous()
            x_reshaped = x_reshaped.view(x_reshaped.shape[0], C, N, block_size_c * block_size_n)
            y = apply_mask(mask_y.to(x.device), x_reshaped)
            
            # 可选的层归一化
            y = F.layer_norm(y, (y.size(-1),))
            
            return h, y
            
    def forward_context(self, z, mask_x, mask_y, chan_ids=None):
        """上下文编码器前向传播"""
        # 预测器前向传播
        z, comb_z = self.predictor(z, mask_x=mask_x)
        
        # 重建器前向传播
        r = self.reconstructor(comb_z, chan_ids=chan_ids, mask_y=mask_y)
        
        return z, r

